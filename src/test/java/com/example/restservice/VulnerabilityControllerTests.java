package com.example.restservice;

import org.junit.jupiter.api.Test;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;
import java.util.stream.Stream;

public class VulnerabilityControllerTests {

    @Test
    void returns_location_passed_in() {
        VulnerabilityLocation location = new VulnerabilityLocation("http://www.google.com",
                VulnerabilityLocationKind.URL);

        VulnerabilityController vulnerabilityController = new VulnerabilityController();
        VulnerabilityLocation retVal = vulnerabilityController.location(location);
        assert retVal.location().equals(location.location());
    }

    @Test
    void validates_locationKind_is_URL() {
        VulnerabilityLocation location = new VulnerabilityLocation("http://www.google.com",
                VulnerabilityLocationKind.URL);

        VulnerabilityController vulnerabilityController = new VulnerabilityController();
        VulnerabilityLocation retVal = vulnerabilityController.location(location);
        assert retVal.locationKind().equals(VulnerabilityLocationKind.URL);
    }

    @Test
    void corrects_locationKindURL_for_nonURL() {
        VulnerabilityLocation location =
                new VulnerabilityLocation("This is not really a URL",
                VulnerabilityLocationKind.URL);

        VulnerabilityController vulnerabilityController = new VulnerabilityController();
        VulnerabilityLocation retVal = vulnerabilityController.location(location);
        assert (retVal.locationKind().equals(VulnerabilityLocationKind.UNDETERMINED));
    }

    @Test
    void adds_urls_to_list_and_returns_list() throws SQLException {
        // init sqlite3 db
        Connection c = null;
        try {
            Class.forName("org.sqlite.JDBC");
            c = DriverManager.getConnection("jdbc:sqlite::memory");
        } catch ( Exception e ) {
            System.err.println( e.getClass().getName() + ": " + e.getMessage() );
            System.exit(0);
        }
        System.out.println("Opened database successfully");

        String dropTableSql = "DROP TABLE IF EXISTS `vulnerability_locations`";
        PreparedStatement dropTableStmt = c.prepareStatement(dropTableSql);
        dropTableStmt.executeUpdate();

        String sql = "CREATE TABLE IF NOT EXISTS `vulnerability_locations` (`location` varchar(96) UNIQUE, 'kind' varchar(32))";
        PreparedStatement pstmt = c.prepareStatement(sql);
        pstmt.executeUpdate();

/*        List<String> urls = List.of("http://www.google.com",
                "http://www.amazon.com", "http://www.facebook.com");*/
        List<VulnerabilityLocation> urls = Stream.of(
                new VulnerabilityLocation("http://www.google.com", VulnerabilityLocationKind.URL),
                new VulnerabilityLocation("http://www.amazon.com", VulnerabilityLocationKind.URL),
                new VulnerabilityLocation("http://www.facebook.com", VulnerabilityLocationKind.URL)
        ).toList();

        VulnerabilityController vulnerabilityController = new VulnerabilityController();
        for (VulnerabilityLocation l : urls) {
            vulnerabilityController.location(l);
        }

        List<VulnerabilityLocation> retVal = vulnerabilityController.listVulnerabilities();
        assert retVal.equals(urls);
    }

}
