package com.example.restservice;

import org.springframework.web.bind.annotation.*;

import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.net.URL;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

@RestController
public class VulnerabilityController {

    // private List<String> vulnerabilities = new ArrayList<>();
    private static final Logger LOGGER = Logger.getLogger( VulnerabilityController.class.getName() );
    @PostMapping(value={"/vulnerability"})
    public VulnerabilityLocation location(@RequestBody VulnerabilityLocation location) {
        try {
            // this would throw for locations that are not urls
            new URL(location.location()).toURI();
            // vulnerabilities.add(location.location());

            // this would throw for urls that are not unique
            insert_location_into_db(location.location(), VulnerabilityLocationKind.URL.toString());

            return new VulnerabilityLocation(location.location(),
                    VulnerabilityLocationKind.URL);

            // not a url
        } catch (MalformedURLException | URISyntaxException e) {
            LOGGER.log(Level.WARNING,
                    "Vulnerability location kind was not url: {}", location.location());
            return new VulnerabilityLocation(location.location(),
                    VulnerabilityLocationKind.UNDETERMINED);

            // not unique
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, e.getMessage());

            return new VulnerabilityLocation(location.location(),
                    VulnerabilityLocationKind.URL);
        }
    }

    @GetMapping(value={"/vulnerabilities"})
    public List<VulnerabilityLocation> listVulnerabilities() throws SQLException {
        //return vulnerabilities;
        return select_all_locations_from_db();
    }

    private void insert_location_into_db(String location, String kind) throws SQLException {
        Connection c = null;
        try {
            Class.forName("org.sqlite.JDBC");
            c = DriverManager.getConnection("jdbc:sqlite::memory");
        } catch ( Exception e ) {
            System.err.println( e.getClass().getName() + ": " + e.getMessage() );
            System.exit(0);
        }
        System.out.println("Opened database successfully");

        String sql = "INSERT INTO vulnerability_locations(location,kind) VALUES(?,?)";

        PreparedStatement pstmt = c.prepareStatement(sql);
            pstmt.setString(1, location);
            pstmt.setString(2, kind);
            pstmt.executeUpdate();
    }

    private List<VulnerabilityLocation> select_all_locations_from_db() throws SQLException {
        Connection c = null;
        try {
            Class.forName("org.sqlite.JDBC");
            c = DriverManager.getConnection("jdbc:sqlite::memory");
        } catch ( Exception e ) {
            System.err.println( e.getClass().getName() + ": " + e.getMessage() );
            System.exit(0);
        }
        System.out.println("Opened database successfully");

        String sql = "SELECT * FROM vulnerability_locations";

        PreparedStatement pstmt = c.prepareStatement(sql);
        ResultSet rs = pstmt.executeQuery();
        List<VulnerabilityLocation> locations = new ArrayList<>();
        while (rs.next()) {
            VulnerabilityLocation location = new VulnerabilityLocation(rs.getString("location"),
                    VulnerabilityLocationKind.URL );
            locations.add(location);
        }
        return locations;
    }
}
